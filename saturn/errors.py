from __future__ import annotations
from typing import Optional


class SaturnError(Exception):
    """
    Any error generated by Saturn.

    This error wraps its source transparently in such a way that its attributes
    can be accessed directly: for example, if the original error has a `message` attribute,
    `HaystackError.message` will exist and have the expected content.
    If send_message_in_event is set to True (default), the message will be sent as part of a telemetry event reporting the error.
    The messages of errors that might contain user-specific information will not be sent, e.g., DocumentStoreError or OpenAIError.
    """

    def __init__(self, message: str = None,
                 docs_link: Optional[str] = None,
                 # send_message_in_event: bool = True
                 ):
        # TODO implementing send_custom_event
        # payload = {'message': message} if message in send_message_in_event else {}
        super().__init__()
        if message:
            self.message = message
        self.docs_link = docs_link

    def __getattr__(self, attr):
        # if self.__cause__ is None, it will raise the expected AttributeError
        getattr(self.__cause__, attr)

    def __str__(self):
        if self.docs_link:
            docs_message = f"\n\n Checkout the documentation at {self.docs_link}"
            return self.message + docs_message
        return self.message

    def __repr__(self):
        return str(self)


class PipelineError(SaturnError):
    """
    Exception for issues raised within a pipeline
    """

    def __int__(self, message: Optional[str] = None):
        super().__init__(message=message)


class PipelineSchemaError(PipelineError):
    """
    Exception for issues arising when reading/building the JSON schema of pipelines
    """

    def __init__(self, message: Optional[str] = "Pipeline Schema Error", docs_link: Optional[str] = None):
        super().__init__(message=message, docs_link=docs_link)


class PipelineConfigError(PipelineError):
    """
    Exception for issues within a pipeline config file
    """

    def __init__(self, message: Optional[str] = "Pipeline Config Error", docs_link: Optional[str] = None):
        super().__init__(message=message, docs_link=docs_link)


class DocumentStoreError(SaturnError):
    """Exception for issues that occur in a document store"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)


class DuplicateDocumentError(DocumentStoreError, ValueError):
    """Exception for Duplicate document"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)


class FilterError(DocumentStoreError):
    """Exception for issues that occur building complex filters"""

    def __init__(self, message: Optional[str] = None):
        super().__init__(message=message)
